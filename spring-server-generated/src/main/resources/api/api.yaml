swagger: '2.0'
info:
  version: '1.0'
  title: 'Pizza-Pizza'
  description: 'This is the API doc for Pizza-Pizza store.'
  contact:
    email: fan.fan@husky.neu.edu

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
  - name: pizza
    description: Pizza related Api
  - name: suggestion
    description: suggestion related Api
  - name: priceRule
    description: priceRule related Api
  - name: price
    description: price related Api
  - name: topping
    description: topping related Api
  - name: store
    description: store related Api
  - name: order
    description: order related Api
  - name: promotion
    description: promotion related Api

paths:
  /pizza:
    post:
      tags:
        - pizza
      summary: adds pizza
      operationId: addPizza
      description: Adds pizza to the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: pizza
          description: Pizza to add
          schema:
            $ref: '#/definitions/Pizza'
      responses:
        201:
          description: item created
          schema:
            $ref: '#/definitions/Pizza'
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists

  /pizza/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: pizza id
      tags:
        - pizza
      summary: get a pizza
      operationId: getAPizza
      description: |
        Get pizza by Id
      produces:
        - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            $ref: '#/definitions/Pizza'
        400:
          description: bad input parameter

  /price/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: item id
      tags:
        - price
      summary: get a price by id
      operationId: get a Price
      description: |
        Get price by Id
      produces:
        - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            $ref: '#/definitions/Price'
        400:
          description: bad input parameter

  /suggestion/{number}:
    get:
      parameters:
        - in: path
          name: number
          required: true
          type: number
          description: get suggesstions
      tags:
        - suggestion
      summary: get a sugestion
      operationId: getASuggestion
      description: |
        Get suggestion by number of people
      responses:
        200:
          description: search results matching criteria
          schema:
            type: string
        400:
          description: bad input parameter

  /priceRule/{name}:
    get:
      parameters:
        - in: path
          name: name
          required: true
          type: string
          description: price rule name
      tags:
        - priceRule
      summary: get a price rule by name
      operationId: get a Price rule
      description: |
        Get price rule by name
      produces:
        - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            $ref: '#/definitions/PriceRule'
        400:
          description: bad input parameter

  /store:
    get:
      tags:
        - store
      summary: get all stores
      operationId: getAllStores
      description: |
        Get stores
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Store'
        400:
          description: bad input parameter

  /order:
    post:
      tags:
        - order
      summary: make an order
      operationId: makeOrder
      description: make an order to the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: order
          description: Order to add
          schema:
            $ref: '#/definitions/Order'
      responses:
        201:
          description: item created
          schema:
            $ref: '#/definitions/Order'
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /order/{id}:
    get:
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: order id
      tags:
        - order
      summary: get a order
      operationId: getAOrder
      description: |
        Get order by Id
      produces:
        - application/json
      responses:
        200:
          description: search results matching criteria
          schema:
            $ref: '#/definitions/Order'
        400:
          description: bad input parameter

  /promotion:
    get:
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
          description: promotion code to use.
      tags:
        - developers
      summary: Take in an promotion code and return the discount.
      operationId: getPromotion
      description: |
        Get discount by promotion code
      produces:
        - application/json
      responses:
        200:
          description: discount after discount is succesfully returned.
          schema:
            $ref: '#/definitions/Promotion'
        400:
          description: invalid input, object invalid

    post:
      tags:
        - admins
      summary: add a valid promotion code with corresponding discount in database.
      operationId: addPromotion
      description: add a new promotion code with discount.
      responses:
        201:
          description: discount for promotion code created.
        400:
          description: invalid input, object invalid
        409:
          description: an existing item doesn't exist
      parameters:
        - in: body
          name: promotion
          description: promotion code item to add
          schema:
            $ref: '#/definitions/Promotion'

    delete:
      tags:
        - admins
      summary: deletes a promotion code
      operationId: deletePromotion
      description: Delete an item in the system
      responses:
        201:
          description: item deleted
        400:
          description: 'invalid input, object invalid'
        409:
          description: an existing item doesn't exist
      parameters:
        - in: query
          name: searchCode
          description: pass a promotion code string for looking up a promotion
          required: true
          schema:
            type: string


definitions:
  Pizza:
    type: object
    properties:
      id:
        type: string
      displayName:
        type: string
      isGlutenFree:
        type: boolean
      type:
        $ref: '#/definitions/Type'
      ownerId:
        type: string
      toppings:
        type: array
        items:
          $ref: '#/definitions/Toppings'
      base:
        $ref: '#/definitions/Base'

  Price:
    type: object
    properties:
      price:
        type: number
        format: double

  PizzaSize:
    type: object
    required:
      - id
      - description
      - size
      - noOfSlices
      - caloriesPerSlice
    properties:
      id:
        type: integer
        format: int64
        example: 1
      description:
        type: string
        format: string
        example: small
      size:
        type: integer
        format: int64
        example: 11
      noOfSlices:
        type: integer
        format: int32
        example: 8
      caloriesPerSlice:
        type: integer
        format: int32
        example: 270
  crustType:
    type: string
    enum:
      - "Original Pan"
      - "Hand Tossed"
      - "Thin N Crispy"
      - "Original Stuffed Crust"
  sauceType:
    type: string
    enum:
      - "Classic Marinara"
      - "Creamy Garlic Parmesan"
      - "Barbeque"
      - "Buffalo"
  ToppingType:
    type: string
    enum: ['meat', 'vegetable']

  Toppings:
    type: object
    required:
      - name
      - isGlutenFree
      - isPremium
      - toppingType
      - description
    properties:
      id:
        type: string
        example: '5dbcdb313f197a67bf4d66cf'
      name:
        type: string
        example: 'Beef'
      isGlutenFree:
        type: boolean
        example: true
      isPremium:
        type: boolean
      toppingType:
        $ref: '#/definitions/ToppingType'
      description:
        type: string
        example: 'Gluten free premium beef as meat topping'
  Base:
    type: object
    properties:
      pizzaSize:
        $ref: '#/definitions/PizzaSize'
      sauceType:
        $ref: '#/definitions/sauceType'
      crustType:
        $ref: '#/definitions/crustType'
  PriceRule:
    type: object
    properties:
      id:
        type: string
      vagetablePrice:
        type: number
        format: double
      meatPrice:
        type: number
        format: double
      smallBasePrice:
        type: number
        format: double
      mediumBasePrice:
        type: number
        format: double
      largeBasePrice:
        type: number
        format: double
  Store:
    type: object
    properties:
      name:
        type: string
      address:
        $ref: '#/definitions/Address'
      geoLocation:
        $ref: '#/definitions/GeoLocation'
  Address:
    type: object
    properties:
      address1:
        type: string
      address2:
        type: string
      city:
        type: string
      state:
        type: string
      zipcode:
        type: string
  GeoLocation:
    properties:
      longtitude:
        type: number
        example: -122.33
      latitude:
        type: number
        example: 47.606209
  Order:
    type: object
    properties:
      id:
        type: string
      pizzaIds:
        type: array
        items:
          type: string
      name:
        type: string

  Payment:
    type: object
    properties:
      nameOnCard:
        type: string
      cardNumber:
        type: string
      expireYear:
        type: integer
      expireMonth:
        type: integer
      billingAddress:
        $ref: '#/definitions/Address'
  Type:
    type: string
    enum:
      - Specialty
      - BuildYourOwn

  Promotion:
    type: object
    properties:
      code:
        type: string
      discount:
        type: number
# Added by API Auto Mocking Plugin


host: virtserver.swaggerhub.com
basePath: /ffhere/Pizza-Pizza/1.0
schemes:
  - https